'use client';

import { useState } from 'react';
import { RuleProfile } from '@/core/rules/types';

interface RuleToggleProps {
  rule: RuleProfile;
  onToggle: (enabled: boolean) => void;
  onUpdate: (updates: Partial<RuleProfile>) => void;
}

const RuleToggle = ({ rule, onToggle }: RuleToggleProps) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const handleToggle = () => {
    onToggle(!rule.enabled);
  };

  return (
    <div className="card">
      <div className="flex items-center justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-3">
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={rule.enabled}
                onChange={handleToggle}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
            
            <div>
              <h3 className="font-medium">{rule.params.name}</h3>
              <p className="text-sm text-gray-600">{rule.params.description}</p>
            </div>
          </div>
        </div>
        
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="p-2 text-gray-500 hover:text-gray-700"
        >
          {isExpanded ? '‚ñº' : '‚ñ∂'}
        </button>
      </div>

      {isExpanded && (
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="space-y-3">
            {rule.params.nDays && rule.params.mDays && (
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">–û–∫–Ω–æ –¥–Ω–µ–π:</span>
                <span className="font-medium">{rule.params.nDays} –∏–∑ {rule.params.mDays}</span>
              </div>
            )}
            
            {rule.params.maxDaysPerYear && (
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">–ú–∞–∫—Å–∏–º—É–º –≤ –≥–æ–¥:</span>
                <span className="font-medium">{rule.params.maxDaysPerYear} –¥–Ω–µ–π</span>
              </div>
            )}
            
            {rule.params.maxDaysOutside && (
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">–ú–∞–∫—Å–∏–º—É–º –≤–Ω–µ —Å—Ç—Ä–∞–Ω—ã:</span>
                <span className="font-medium">{rule.params.maxDaysOutside} –¥–Ω–µ–π</span>
              </div>
            )}
            
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">–¢–∏–ø –ø—Ä–∞–≤–∏–ª–∞:</span>
              <span className="text-sm">
                {rule.params.calendarYear && '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–æ–¥'}
                {rule.params.rolling12Months && '–°–∫–æ–ª—å–∑—è—â–∏–µ 12 –º–µ—Å—è—Ü–µ–≤'}
                {rule.params.nDays && rule.params.mDays && '–°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ'}
                {rule.params.maxDaysOutside && '–ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –≤–Ω–µ —Å—Ç—Ä–∞–Ω—ã'}
              </span>
            </div>
          </div>
          
          <div className="mt-4 text-xs text-gray-500">
            <p>‚ö†Ô∏è –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</p>
            <p>üìù –ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default RuleToggle;
