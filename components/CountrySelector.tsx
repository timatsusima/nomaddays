'use client';

import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/Button';

interface Country {
  code: string;
  name: string;
  flag: string;
}

const COUNTRIES: Country[] = [
  { code: 'DE', name: '–ì–µ—Ä–º–∞–Ω–∏—è', flag: 'üá©üá™' },
  { code: 'FR', name: '–§—Ä–∞–Ω—Ü–∏—è', flag: 'üá´üá∑' },
  { code: 'IT', name: '–ò—Ç–∞–ª–∏—è', flag: 'üáÆüáπ' },
  { code: 'ES', name: '–ò—Å–ø–∞–Ω–∏—è', flag: 'üá™üá∏' },
  { code: 'NL', name: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', flag: 'üá≥üá±' },
  { code: 'BE', name: '–ë–µ–ª—å–≥–∏—è', flag: 'üáßüá™' },
  { code: 'AT', name: '–ê–≤—Å—Ç—Ä–∏—è', flag: 'üá¶üáπ' },
  { code: 'CH', name: '–®–≤–µ–π—Ü–∞—Ä–∏—è', flag: 'üá®üá≠' },
  { code: 'PL', name: '–ü–æ–ª—å—à–∞', flag: 'üáµüá±' },
  { code: 'CZ', name: '–ß–µ—Ö–∏—è', flag: 'üá®üáø' },
  { code: 'HU', name: '–í–µ–Ω–≥—Ä–∏—è', flag: 'üá≠üá∫' },
  { code: 'SK', name: '–°–ª–æ–≤–∞–∫–∏—è', flag: 'üá∏üá∞' },
  { code: 'SI', name: '–°–ª–æ–≤–µ–Ω–∏—è', flag: 'üá∏üáÆ' },
  { code: 'HR', name: '–•–æ—Ä–≤–∞—Ç–∏—è', flag: 'üá≠üá∑' },
  { code: 'BG', name: '–ë–æ–ª–≥–∞—Ä–∏—è', flag: 'üáßüá¨' },
  { code: 'RO', name: '–†—É–º—ã–Ω–∏—è', flag: 'üá∑üá¥' },
  { code: 'GR', name: '–ì—Ä–µ—Ü–∏—è', flag: 'üá¨üá∑' },
  { code: 'PT', name: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è', flag: 'üáµüáπ' },
  { code: 'IE', name: '–ò—Ä–ª–∞–Ω–¥–∏—è', flag: 'üáÆüá™' },
  { code: 'FI', name: '–§–∏–Ω–ª—è–Ω–¥–∏—è', flag: 'üá´üáÆ' },
  { code: 'SE', name: '–®–≤–µ—Ü–∏—è', flag: 'üá∏üá™' },
  { code: 'DK', name: '–î–∞–Ω–∏—è', flag: 'üá©üá∞' },
  { code: 'NO', name: '–ù–æ—Ä–≤–µ–≥–∏—è', flag: 'üá≥üá¥' },
  { code: 'IS', name: '–ò—Å–ª–∞–Ω–¥–∏—è', flag: 'üáÆüá∏' },
  { code: 'EE', name: '–≠—Å—Ç–æ–Ω–∏—è', flag: 'üá™üá™' },
  { code: 'LV', name: '–õ–∞—Ç–≤–∏—è', flag: 'üá±üáª' },
  { code: 'LT', name: '–õ–∏—Ç–≤–∞', flag: 'üá±üáπ' },
  { code: 'LU', name: '–õ—é–∫—Å–µ–º–±—É—Ä–≥', flag: 'üá±üá∫' },
  { code: 'MT', name: '–ú–∞–ª—å—Ç–∞', flag: 'üá≤üáπ' },
  { code: 'CY', name: '–ö–∏–ø—Ä', flag: 'üá®üáæ' },
  { code: 'US', name: '–°–®–ê', flag: 'üá∫üá∏' },
  { code: 'CA', name: '–ö–∞–Ω–∞–¥–∞', flag: 'üá®üá¶' },
  { code: 'GB', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', flag: 'üá¨üáß' },
  { code: 'AU', name: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', flag: 'üá¶üá∫' },
  { code: 'NZ', name: '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è', flag: 'üá≥üáø' },
  { code: 'JP', name: '–Ø–ø–æ–Ω–∏—è', flag: 'üáØüáµ' },
  { code: 'KR', name: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', flag: 'üá∞üá∑' },
  { code: 'SG', name: '–°–∏–Ω–≥–∞–ø—É—Ä', flag: 'üá∏üá¨' },
  { code: 'TH', name: '–¢–∞–∏–ª–∞–Ω–¥', flag: 'üáπüá≠' },
  { code: 'VN', name: '–í—å–µ—Ç–Ω–∞–º', flag: 'üáªüá≥' },
  { code: 'MY', name: '–ú–∞–ª–∞–π–∑–∏—è', flag: 'üá≤üáæ' },
  { code: 'ID', name: '–ò–Ω–¥–æ–Ω–µ–∑–∏—è', flag: 'üáÆüá©' },
  { code: 'PH', name: '–§–∏–ª–∏–ø–ø–∏–Ω—ã', flag: 'üáµüá≠' },
  { code: 'IN', name: '–ò–Ω–¥–∏—è', flag: 'üáÆüá≥' },
  { code: 'BR', name: '–ë—Ä–∞–∑–∏–ª–∏—è', flag: 'üáßüá∑' },
  { code: 'AR', name: '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞', flag: 'üá¶üá∑' },
  { code: 'MX', name: '–ú–µ–∫—Å–∏–∫–∞', flag: 'üá≤üáΩ' },
  { code: 'CL', name: '–ß–∏–ª–∏', flag: 'üá®üá±' },
  { code: 'CO', name: '–ö–æ–ª—É–º–±–∏—è', flag: 'üá®üá¥' },
  { code: 'PE', name: '–ü–µ—Ä—É', flag: 'üáµüá™' },
  { code: 'UY', name: '–£—Ä—É–≥–≤–∞–π', flag: 'üá∫üáæ' },
  { code: 'ZA', name: '–Æ–ê–†', flag: 'üáøüá¶' },
  { code: 'EG', name: '–ï–≥–∏–ø–µ—Ç', flag: 'üá™üá¨' },
  { code: 'MA', name: '–ú–∞—Ä–æ–∫–∫–æ', flag: 'üá≤üá¶' },
  { code: 'TR', name: '–¢—É—Ä—Ü–∏—è', flag: 'üáπüá∑' },
  { code: 'IL', name: '–ò–∑—Ä–∞–∏–ª—å', flag: 'üáÆüá±' },
  { code: 'AE', name: '–û–ê–≠', flag: 'üá¶üá™' },
  { code: 'SA', name: '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è', flag: 'üá∏üá¶' },
  { code: 'QA', name: '–ö–∞—Ç–∞—Ä', flag: 'üá∂üá¶' },
  { code: 'KW', name: '–ö—É–≤–µ–π—Ç', flag: 'üá∞üáº' },
  { code: 'BH', name: '–ë–∞—Ö—Ä–µ–π–Ω', flag: 'üáßüá≠' },
  { code: 'OM', name: '–û–º–∞–Ω', flag: 'üá¥üá≤' },
  { code: 'JO', name: '–ò–æ—Ä–¥–∞–Ω–∏—è', flag: 'üáØüá¥' },
  { code: 'LB', name: '–õ–∏–≤–∞–Ω', flag: 'üá±üáß' },
  { code: 'SY', name: '–°–∏—Ä–∏—è', flag: 'üá∏üáæ' },
  { code: 'IQ', name: '–ò—Ä–∞–∫', flag: 'üáÆüá∂' },
  { code: 'IR', name: '–ò—Ä–∞–Ω', flag: 'üáÆüá∑' },
  { code: 'AF', name: '–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω', flag: 'üá¶üá´' },
  { code: 'PK', name: '–ü–∞–∫–∏—Å—Ç–∞–Ω', flag: 'üáµüá∞' },
  { code: 'BD', name: '–ë–∞–Ω–≥–ª–∞–¥–µ—à', flag: 'üáßüá©' },
  { code: 'LK', name: '–®—Ä–∏-–õ–∞–Ω–∫–∞', flag: 'üá±üá∞' },
  { code: 'NP', name: '–ù–µ–ø–∞–ª', flag: 'üá≥üáµ' },
  { code: 'BT', name: '–ë—É—Ç–∞–Ω', flag: 'üáßüáπ' },
  { code: 'MM', name: '–ú—å—è–Ω–º–∞', flag: 'üá≤üá≤' },
  { code: 'LA', name: '–õ–∞–æ—Å', flag: 'üá±üá¶' },
  { code: 'KH', name: '–ö–∞–º–±–æ–¥–∂–∞', flag: 'üá∞üá≠' },
  { code: 'MN', name: '–ú–æ–Ω–≥–æ–ª–∏—è', flag: 'üá≤üá≥' },
  { code: 'KZ', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', flag: 'üá∞üáø' },
  { code: 'UZ', name: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω', flag: 'üá∫üáø' },
  { code: 'KG', name: '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω', flag: 'üá∞üá¨' },
  { code: 'TJ', name: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', flag: 'üáπüáØ' },
  { code: 'TM', name: '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω', flag: 'üáπüá≤' },
  { code: 'AZ', name: '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω', flag: 'üá¶üáø' },
  { code: 'GE', name: '–ì—Ä—É–∑–∏—è', flag: 'üá¨üá™' },
  { code: 'AM', name: '–ê—Ä–º–µ–Ω–∏—è', flag: 'üá¶üá≤' },
  { code: 'RU', name: '–†–æ—Å—Å–∏—è', flag: 'üá∑üá∫' },
  { code: 'BY', name: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ' },
  { code: 'UA', name: '–£–∫—Ä–∞–∏–Ω–∞', flag: 'üá∫üá¶' },
  { code: 'MD', name: '–ú–æ–ª–¥–æ–≤–∞', flag: 'üá≤üá©' },
  { code: 'RS', name: '–°–µ—Ä–±–∏—è', flag: 'üá∑üá∏' },
  { code: 'ME', name: '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è', flag: 'üá≤üá™' },
  { code: 'BA', name: '–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞', flag: 'üáßüá¶' },
  { code: 'MK', name: '–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è', flag: 'üá≤üá∞' },
  { code: 'AL', name: '–ê–ª–±–∞–Ω–∏—è', flag: 'üá¶üá±' },
  { code: 'XK', name: '–ö–æ—Å–æ–≤–æ', flag: 'üáΩüá∞' },
  { code: 'AD', name: '–ê–Ω–¥–æ—Ä—Ä–∞', flag: 'üá¶üá©' },
  { code: 'LI', name: '–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω', flag: 'üá±üáÆ' },
  { code: 'MC', name: '–ú–æ–Ω–∞–∫–æ', flag: 'üá≤üá®' },
  { code: 'SM', name: '–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ', flag: 'üá∏üá≤' },
  { code: 'VA', name: '–í–∞—Ç–∏–∫–∞–Ω', flag: 'üáªüá¶' },
  { code: 'OUTSIDE', name: '–í–Ω–µ –†–ö', flag: 'üåç' }
];

interface CountrySelectorProps {
  value?: string;
  onChange: (countryCode: string) => void;
  placeholder?: string;
}

export function CountrySelector({ value, onChange, placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É' }: CountrySelectorProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const selectedCountry = COUNTRIES.find(c => c.code === value);
  
  const filteredCountries = COUNTRIES.filter(country =>
    country.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    country.code.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSelect = (country: Country) => {
    onChange(country.code);
    setIsOpen(false);
    setSearchTerm('');
  };

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full h-11 px-4 text-left bg-[var(--bg)] border border-[var(--border)] rounded-lg hover:border-[var(--brand)] focus:outline-none focus:ring-2 focus:ring-[var(--brand)] transition-colors text-[15px] overflow-hidden"
      >
        {selectedCountry ? (
          <div className="flex items-center gap-3">
            <span className="text-lg leading-none">{selectedCountry.flag}</span>
            <span className="text-[var(--text)] font-semibold flex-1 truncate leading-none">{selectedCountry.name}</span>
            <span className="text-[var(--text-secondary)] text-sm leading-none">({selectedCountry.code})</span>
          </div>
        ) : (
          <span className="text-[var(--text-secondary)] leading-none">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</span>
        )}
      </button>

      {isOpen && (
        <div className="absolute z-50 w-full mt-2 bg-[var(--bg)] border border-[var(--border)] rounded-2xl shadow-2xl overflow-hidden">
          <div className="sticky top-0 p-2 border-b border-[var(--border)] bg-[var(--surface)]">
            <div className="flex items-center gap-2 bg-[var(--bg)] border border-[var(--border)] rounded-full px-3 h-11">
              <svg className="w-5 h-5 text-[var(--text-secondary)]" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-4.35-4.35M10 18a8 8 0 100-16 8 8 0 000 16z"/></svg>
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã / —Ä–µ–≥–∏–æ–Ω–∞"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="flex-1 bg-transparent focus:outline-none text-[15px] text-[var(--text)] placeholder-[var(--text-secondary)]"
                autoFocus
              />
            </div>
          </div>
          
          <div className="max-h-72 overflow-y-auto">
            {filteredCountries.length === 0 ? (
              <div className="p-4 text-center text-[var(--text-secondary)] text-sm">
                –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
              </div>
            ) : (
              filteredCountries.map((country) => (
                <button
                  key={country.code}
                  type="button"
                  onClick={() => handleSelect(country)}
                  className="w-full px-4 py-3 text-left hover:bg-[var(--hover)] focus:bg-[var(--hover)] focus:outline-none transition-colors border-b border-[var(--border)] last:border-b-0"
                >
                  <div className="flex items-center gap-3">
                    <span className="text-xl">{country.flag}</span>
                    <div className="flex-1 text-left">
                      <div className="font-semibold text-[var(--text)] text-[16px]">{country.name}</div>
                      <div className="text-[13px] text-[var(--text-secondary)]">{country.code}</div>
                    </div>
                  </div>
                </button>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  );
}
