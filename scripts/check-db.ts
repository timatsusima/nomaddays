import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    console.log('üîç Checking database connection...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ Database connected successfully');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞–Ω
    const countries = await prisma.country.findMany();
    console.log(`üìä Countries table: ${countries.length} records`);
    
    if (countries.length === 0) {
      console.log('‚ö†Ô∏è  Countries table is empty! Need to seed data.');
    } else {
      console.log('üìã Sample countries:', countries.slice(0, 3).map(c => `${c.name} (${c.code})`));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–µ–∑–¥–æ–∫
    const trips = await prisma.trip.findMany();
    console.log(`‚úàÔ∏è  Trips table: ${trips.length} records`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∞–≤–∏–ª
    const rules = await prisma.ruleProfile.findMany();
    console.log(`‚öñÔ∏è  Rules table: ${rules.length} records`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany();
    console.log(`üë§ Users table: ${users.length} records`);
    
  } catch (error) {
    console.error('‚ùå Database check failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();
