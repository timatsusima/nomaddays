// Dashboard v3.0 - FORCE REFRESH
// Build: 2024-08-27 21:00
// Cache: NO-CACHE-HEADERS

'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { WelcomeModal } from '@/components/WelcomeModal';
import { FirstTripsOnboarding } from '@/components/FirstTripsOnboarding';
import Navigation from '@/components/Navigation';

export default function DashboardPage() {
  const [showWelcomeModal, setShowWelcomeModal] = useState(false);
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [trips, setTrips] = useState<any[]>([]);
  const [rules, setRules] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª
    const hasSeenWelcome = localStorage.getItem('nomaddays_welcome_seen');
    if (!hasSeenWelcome) {
      setShowWelcomeModal(true);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å onboarding –ø–µ—Ä–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫
    const hasAddedFirstTrips = localStorage.getItem('nomaddays_first_trips_added');
    if (!hasAddedFirstTrips && hasSeenWelcome) {
      setShowOnboarding(true);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      setIsLoading(true);
      await Promise.all([fetchTrips(), fetchRules()]);
    } catch (error) {
      // Silent fail for production
    } finally {
      setIsLoading(false);
    }
  };

  const fetchTrips = async () => {
    try {
      const response = await fetch('/api/trips');
      if (response.ok) {
        const data = await response.json();
        setTrips(data);
      }
    } catch (error) {
      // Silent fail for production - don't spam console
      setTrips([]);
    }
  };

  const fetchRules = async () => {
    try {
      const response = await fetch('/api/rules');
      if (response.ok) {
        const data = await response.json();
        setRules(data);
      }
    } catch (error) {
      // Silent fail for production - don't spam console
      setRules([]);
    }
  };

  const handleWelcomeComplete = () => {
    setShowWelcomeModal(false);
    localStorage.setItem('nomaddays_welcome_seen', 'true');
    
    // –ü–æ—Å–ª–µ welcome –ø–æ–∫–∞–∑—ã–≤–∞–µ–º onboarding –ø–µ—Ä–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫
    setTimeout(() => {
      setShowOnboarding(true);
    }, 500);
  };

  const handleFirstTripsComplete = async (newTrips: any[]) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–µ–∑–¥–∫–∏ —á–µ—Ä–µ–∑ API
    try {
      for (const trip of newTrips) {
        await fetch('/api/trips', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(trip)
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫
      await fetchTrips();
      
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
      localStorage.setItem('nomaddays_first_trips_added', 'true');
      setShowOnboarding(false);
    } catch (error) {
      // Silent fail for production
      setShowOnboarding(false);
    }
  };

  const handleFirstTripsSkip = () => {
    localStorage.setItem('nomaddays_first_trips_added', 'true');
    setShowOnboarding(false);
  };

  const totalDays = trips.reduce((sum, trip) => {
    const entry = new Date(trip.entryDate);
    const exit = new Date(trip.exitDate);
    const days = Math.ceil((exit.getTime() - entry.getTime()) / (1000 * 60 * 60 * 24));
    return sum + days;
  }, 0);

  const activeRules = rules.filter(rule => rule.enabled).length;

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[var(--surface)]">
      {/* Header */}
      <div className="bg-[var(--bg)] border-b border-[var(--border)] p-4 mb-6">
        <h1 className="text-2xl font-bold text-[var(--text)] mb-2">NomadDays</h1>
        <p className="text-[var(--text-secondary)]">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–Ω–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</p>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-3 gap-4 mb-6">
        <div className="card text-center">
          <div className="text-2xl font-bold text-[var(--brand)] mb-1">{trips.length}</div>
          <div className="text-sm text-[var(--text-secondary)]">–ü–æ–µ–∑–¥–æ–∫</div>
        </div>
        <div className="card text-center">
          <div className="text-2xl font-bold text-[var(--brand)] mb-1">{totalDays}</div>
          <div className="text-sm text-[var(--text-secondary)]">–î–Ω–µ–π</div>
        </div>
        <div className="card text-center">
          <div className="text-2xl font-bold text-[var(--brand)] mb-1">{rules.length}</div>
          <div className="text-sm text-[var(--text-secondary)]">–ü—Ä–∞–≤–∏–ª</div>
        </div>
      </div>

      {/* Status */}
      <div className="card mb-6">
        <div className="card-title">–°—Ç–∞—Ç—É—Å</div>
        <div className="text-[var(--text)]">
          {totalDays === 0 ? '–ù–µ—Ç –ø–æ–µ–∑–¥–æ–∫' : '–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ'}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold text-[var(--text)] mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
        <div className="space-y-3">
          <Link href="/trips" className="card block hover:border-[var(--brand)] transition-colors">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-[var(--brand)] rounded-full flex items-center justify-center">
                <span className="text-white text-lg">+</span>
              </div>
              <div>
                <div className="font-semibold text-[var(--text)]">–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É</div>
                <div className="text-sm text-[var(--text-secondary)]">–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–µ–∑–¥–∫—É</div>
              </div>
            </div>
          </Link>
          <Link href="/planner" className="card block hover:border-[var(--brand)] transition-colors">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-[var(--brand)] rounded-full flex items-center justify-center">
                <span className="text-white text-lg">üìÖ</span>
              </div>
              <div>
                <div className="font-semibold text-[var(--text)]">–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É</div>
                <div className="text-sm text-[var(--text-secondary)]">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏</div>
              </div>
            </div>
          </Link>
        </div>
      </div>

      {/* Recent Trips */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold text-[var(--text)] mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏</h2>
        {trips.length === 0 ? (
          <div className="card text-center py-8">
            <div className="text-4xl mb-4">‚úàÔ∏è</div>
            <div className="text-[var(--text-secondary)] mb-2">–ù–µ—Ç –ø–æ–µ–∑–¥–æ–∫</div>
            <div className="text-sm text-[var(--text-secondary)] mb-4">
              –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–µ–∑–¥–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            </div>
            <Link href="/trips" className="btn">
              –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É
            </Link>
          </div>
        ) : (
          <div className="space-y-3">
            {trips.slice(0, 3).map((trip) => (
              <div key={trip.id} className="card">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-semibold text-[var(--text)]">{trip.countryCode}</div>
                    <div className="text-sm text-[var(--text-secondary)]">
                      {new Date(trip.entryDate).toLocaleDateString()} - {new Date(trip.exitDate).toLocaleDateString()}
                    </div>
                  </div>
                  <div className="text-[var(--brand)]">
                    {Math.ceil((new Date(trip.exitDate).getTime() - new Date(trip.entryDate).getTime()) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modals */}
      <WelcomeModal 
        isOpen={showWelcomeModal} 
        onClose={() => setShowWelcomeModal(false)}
        onComplete={handleWelcomeComplete}
      />
      <FirstTripsOnboarding 
        isOpen={showOnboarding} 
        onComplete={handleFirstTripsComplete}
        onSkip={handleFirstTripsSkip}
      />

      {/* Navigation */}
      <Navigation />
    </div>
  );
}
