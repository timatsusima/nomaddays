import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function POST() {
  try {
    console.log('üöÄ Manual database initialization requested...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    await prisma.$connect();
    console.log('‚úÖ Database connected');
    
    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    console.log('üìã Creating database schema...');
    await prisma.$executeRaw`CREATE SCHEMA IF NOT EXISTS public`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableExists = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'Country'
      );
    `;
    
    if (!tableExists[0]?.exists) {
      console.log('üîÑ Tables don\'t exist, creating them...');
      
      // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é
      await prisma.$executeRaw`
        CREATE TABLE IF NOT EXISTS "User" (
          "id" TEXT NOT NULL,
          "tgUserId" TEXT NOT NULL,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL,
          CONSTRAINT "User_pkey" PRIMARY KEY ("id")
        );
      `;
      
      await prisma.$executeRaw`
        CREATE TABLE IF NOT EXISTS "Country" (
          "code" TEXT NOT NULL,
          "name" TEXT NOT NULL,
          CONSTRAINT "Country_pkey" PRIMARY KEY ("code")
        );
      `;
      
      await prisma.$executeRaw`
        CREATE TABLE IF NOT EXISTS "Trip" (
          "id" TEXT NOT NULL,
          "userId" TEXT NOT NULL,
          "countryCode" TEXT NOT NULL,
          "entryDate" TIMESTAMP(3) NOT NULL,
          "exitDate" TIMESTAMP(3) NOT NULL,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL,
          CONSTRAINT "Trip_pkey" PRIMARY KEY ("id")
        );
      `;
      
      await prisma.$executeRaw`
        CREATE TABLE IF NOT EXISTS "RuleProfile" (
          "id" TEXT NOT NULL,
          "userId" TEXT,
          "key" TEXT NOT NULL,
          "params" TEXT NOT NULL,
          "enabled" BOOLEAN NOT NULL DEFAULT true,
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL,
          CONSTRAINT "RuleProfile_pkey" PRIMARY KEY ("id")
        );
      `;
      
      await prisma.$executeRaw`
        CREATE TABLE IF NOT EXISTS "Setting" (
          "id" TEXT NOT NULL,
          "userId" TEXT NOT NULL,
          "timezone" TEXT NOT NULL DEFAULT 'UTC',
          "locale" TEXT NOT NULL DEFAULT 'ru',
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP(3) NOT NULL,
          CONSTRAINT "Setting_pkey" PRIMARY KEY ("id")
        );
      `;
      
      console.log('‚úÖ Tables created successfully');
    } else {
      console.log('‚úÖ Tables already exist');
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ
    const countryCount = await prisma.country.count();
    if (countryCount === 0) {
      console.log('üå± Seeding database with initial data...');
      
      // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∞–Ω—ã
      await prisma.country.createMany({
        data: [
          { code: 'KZ', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
          { code: 'DE', name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
          { code: 'FR', name: '–§—Ä–∞–Ω—Ü–∏—è' },
          { code: 'IT', name: '–ò—Ç–∞–ª–∏—è' },
          { code: 'ES', name: '–ò—Å–ø–∞–Ω–∏—è' },
          { code: 'NL', name: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã' },
          { code: 'BE', name: '–ë–µ–ª—å–≥–∏—è' },
          { code: 'AT', name: '–ê–≤—Å—Ç—Ä–∏—è' },
          { code: 'CH', name: '–®–≤–µ–π—Ü–∞—Ä–∏—è' },
          { code: 'PL', name: '–ü–æ–ª—å—à–∞' },
          { code: 'CZ', name: '–ß–µ—Ö–∏—è' },
          { code: 'HU', name: '–í–µ–Ω–≥—Ä–∏—è' },
          { code: 'SK', name: '–°–ª–æ–≤–∞–∫–∏—è' },
          { code: 'PT', name: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è' },
          { code: 'IE', name: '–ò—Ä–ª–∞–Ω–¥–∏—è' },
          { code: 'FI', name: '–§–∏–Ω–ª—è–Ω–¥–∏—è' },
          { code: 'SE', name: '–®–≤–µ—Ü–∏—è' },
          { code: 'DK', name: '–î–∞–Ω–∏—è' },
          { code: 'NO', name: '–ù–æ—Ä–≤–µ–≥–∏—è' },
          { code: 'US', name: '–°–®–ê' },
        ]
      });
      
      console.log('‚úÖ Database seeded successfully');
    } else {
      console.log(`‚úÖ Database already has ${countryCount} countries`);
    }
    
    console.log('üéâ Database initialization completed!');
    
    return NextResponse.json({
      status: 'success',
      message: 'Database initialized successfully',
      countryCount: await prisma.country.count(),
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    return NextResponse.json({
      status: 'error',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}
